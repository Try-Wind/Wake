#!/usr/bin/env node

const { spawn, execSync } = require('child_process');
const path = require('path');
const fs = require('fs');

// Determine the binary name based on platform
const binaryName = process.platform === 'win32' ? 'wake.exe' : 'wake';
const binaryPath = path.join(__dirname, binaryName);

// Debug logging (can be enabled with WAKE_DEBUG=1)
if (process.env.WAKE_DEBUG) {
  console.log('Wake wrapper debug info:');
  console.log('  Platform:', process.platform);
  console.log('  Binary name:', binaryName);
  console.log('  Binary path:', binaryPath);
  console.log('  Binary exists:', fs.existsSync(binaryPath));
  if (fs.existsSync(binaryPath)) {
    const stats = fs.statSync(binaryPath);
    console.log('  Binary size:', stats.size, 'bytes');
    console.log('  Binary mode:', '0' + (stats.mode & parseInt('777', 8)).toString(8));
  }
}

// Check if binary exists, if not try to download it
if (!fs.existsSync(binaryPath)) {
  console.log('⚠️  Wake binary not found. Attempting to download...');
  console.log('');
  
  // Try to run the install script
  const installScript = path.join(path.dirname(__dirname), 'install.js');
  
  if (fs.existsSync(installScript)) {
    try {
      console.log('Running installation script...');
      // Run the install script synchronously
      execSync(`node "${installScript}"`, {
        stdio: 'inherit',
        cwd: path.dirname(installScript)
      });
      
      // Check if binary now exists
      if (!fs.existsSync(binaryPath)) {
        throw new Error('Binary still not found after installation attempt');
      }
      
      console.log('✅ Wake binary downloaded successfully!');
      console.log('');
    } catch (error) {
      console.error('❌ Failed to download Wake binary:', error.message);
      console.error('\n📦 Please try manual installation:');
      console.error('   1. Uninstall: npm uninstall -g @trywind/wake');
      console.error('   2. Clear cache: npm cache clean --force');
      console.error('   3. Reinstall: npm install -g @trywind/wake');
      console.error('\nOr download directly from:');
      console.error('   https://github.com/Try-Wind/Wake/releases/latest');
      process.exit(1);
    }
  } else {
    console.error('❌ Installation script not found!');
    console.error('\n📦 Please reinstall the package:');
    console.error('   npm uninstall -g @trywind/wake');
    console.error('   npm install -g @trywind/wake');
    console.error('\nIf the problem persists, please report it at:');
    console.error('   https://github.com/Try-Wind/Wake/issues');
    process.exit(1);
  }
}

// Spawn the actual Wake binary with all arguments
// On Windows, we need to handle this differently
const spawnOptions = {
  stdio: 'inherit',
  env: process.env,
  windowsHide: false
};

// On Windows, explicitly use shell:false and handle the path properly
if (process.platform === 'win32') {
  spawnOptions.shell = false;
  spawnOptions.windowsVerbatimArguments = true;
}

let wake;
try {
  wake = spawn(binaryPath, process.argv.slice(2), spawnOptions);
} catch (error) {
  console.error('❌ Failed to start Wake:', error.message);
  console.error('\nBinary path:', binaryPath);
  console.error('Binary exists:', fs.existsSync(binaryPath));
  
  if (!fs.existsSync(binaryPath)) {
    console.error('\n📦 The Wake binary appears to be missing.');
    console.error('Please try reinstalling:');
    console.error('  npm uninstall -g @trywind/wake');
    console.error('  npm install -g @trywind/wake');
  }
  
  process.exit(1);
}

// Handle process events
wake.on('error', (error) => {
  if (error.code === 'ENOENT') {
    console.error('❌ Wake binary not found!');
    console.error('Please reinstall the package.');
  } else if (error.code === 'EACCES') {
    console.error('❌ Permission denied!');
    console.error('The Wake binary might not be executable.');
    console.error('Try running: chmod +x ' + binaryPath);
  } else {
    console.error('❌ Failed to start Wake:', error.message);
  }
  process.exit(1);
});

wake.on('exit', (code, signal) => {
  if (signal) {
    process.kill(process.pid, signal);
  } else {
    process.exit(code || 0);
  }
});

// Forward signals to the child process
process.on('SIGINT', () => wake.kill('SIGINT'));
process.on('SIGTERM', () => wake.kill('SIGTERM'));